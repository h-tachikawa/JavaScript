worker_processes 1;

events {
  worker_connections 1024;
}

http {
  include /etc/nginx/mime.types;
  default_type application/octet-stream;

  log_format ltsv "local_time:$time_local"
                  "\thost:$remote_addr"
                  "\tforwardedfor:$http_x_forwarded_for"
                  "\treq:$request"
                  "\tstatus:$status"
                  "\tsize:$body_bytes_sent"
                  "\tresponse_time:$upstream_response_time"
                  "\treferer:$http_referer"
                  "\tua:$http_user_agent"
                  "\treqtime:$request_time"
                  "\truntime:$upstream_http_x_runtime"
                  "\tvhost:$host"
                  "\tmethod:$request_method"
                  "\turi:$request_uri";

  access_log /dev/stdout ltsv;
  error_log  /dev/stderr info;

  server_tokens off;
  client_max_body_size 100M;
  sendfile on;
  tcp_nopush on;
  keepalive_timeout 65;
  gzip on;
  gzip_vary on;
  gzip_static always;
  gunzip on;
  gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg;

  server {
    listen 80;
    root /usr/share/nginx/html;

    set $is_secure 0;
    set $force_secure ${FORCE_SECURE};
    if ($force_secure = true) {
      set $is_secure 1;
    }
    if ($http_x_forwarded_proto != https) {
      set $is_secure "${is_secure}1";
    }
    if ($http_user_agent != "ELB-HealthChecker/1.0") {
      set $is_secure "${is_secure}11";
    }
    if ($is_secure = 111) {
      return 301 https://$host$request_uri;
    }

    location ^~ /api {
      expires -1;

      rewrite /api/(.*) /$1 break;
      proxy_redirect off;
      proxy_pass http://${PROXY_PASS};
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
      proxy_set_header X-Forwarded-Server $host;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location ~ \.(css|js|png|jpg|jpeg|svg|ttf|woff|woff2|eot)$ {
      expires max;
      access_log off;
    }

    location / {
      expires -1;
      try_files $uri /index.html;
    }
  }
}
