version: 2.1
executors:
  core-api:
    working_directory: ~/repo/core-api
    docker:
      - image: circleci/ruby:2.6
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          RAILS_ENV: test
          NODE_ENV: development
          AWS_ACCESS_KEY_ID: access_key_id
          AWS_SECRET_KEY: secret_key
          AWS_REGION: ap-northeast-1
          AWS_S3_BUCKET: resily
          AWS_S3_URL: http://127.0.0.1:9000/
          MINIO_HOST: minio
          MINIO_ENDPOINT: http://minio:9000
          RAILS_DATABASE_HOST: db
          RAILS_DATABASE_PASSWORD: password
          RAILS_REDIS_HOST: redis
      - image: mysql:5.7
        name: db
        environment:
          MYSQL_ROOT_PASSWORD: password
      - image: redis:3.2
        name: redis
      - image: blueimp/mailhog:latest
      - image: minio/minio:latest
        name: minio
        environment:
          MINIO_ACCESS_KEY: access_key_id
          MINIO_SECRET_KEY: secret_key
          MINIO_REGION: ap-northeast-1
        command: ["server", "/data"]
  python:
    working_directory: ~/repo
    docker:
      - image: circleci/python:3.6.4
jobs:
  test:
    executor:
      name: core-api
    steps:
      - checkout
      - run:
          name: Which bundler?
          command: bundle -v
      - restore_cache:
          keys:
            - dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - dependencies-
      - run:
          name: Bundle Install
          command: bundle check || bundle install
      - save_cache:
          paths:
            - vendor/bundle
          key: dependencies-{{ checksum "Gemfile.lock" }}
      - run:
          name: Install minio client, prepare minio
          command: |
            curl -sSL https://dl.minio.io/client/mc/release/linux-amd64/mc -o /tmp/mc
            chmod +x /tmp/mc

            /tmp/mc config host add minio http://minio:9000 access_key_id secret_key S3v4
            /tmp/mc mb --region ap-northeast-1 minio/resily
            /tmp/mc policy download minio/resily
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load --trace
      - run:
          name: Run tests
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out test-results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - run:
          name: Generate API Documente
          command: |
            bundle exec rake docs:generate:ordered
      # collect reports
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: docs/api
  build:
    executor:
      name: python
    steps:
      - checkout
      - setup_remote_docker:
          version: 18.06.0-ce
          docker_layer_caching: true
      - run:
          name: Install awscli
          command: sudo pip install awscli --upgrade
      - run:
          name: Build Docker images
          command: ./tools/build -t ${CIRCLE_SHA1}
  deploy:
    parameters:
      env:
        type: enum
        enum: ["develop", "production"]
      url:
        type: enum
        enum: ["https://ap.risily.com/", "https://ap.resily.com/"]
    executor:
      name: python
    steps:
      - checkout
      - run:
          name: Install awsebcli
          command: sudo pip install awsebcli --upgrade
      - run:
          name: Deploy to << parameters.env >>
          command: ./tools/deploy -e << parameters.env >> -t ${CIRCLE_SHA1}
      - run:
          name: Notify deploy completed to slack
          command: curl -X POST --data-urlencode "payload={\"text\":\"Deployed to << parameters.env >>, please check << parameters.url >>\"}" "$SLACK_DEPLOY_TOKEN"
workflows:
  test-and-deploy:
    jobs:
      - test
      - build:
          name: build-docker-images-by-commit
          requires:
            - test
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
      - build:
          name: build-docker-images-by-tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - deploy:
          name: deploy-to-staging
          env: develop
          url: https://ap.risily.com/
          requires:
            - build-docker-images-by-commit
          filters:
            tags:
              ignore: /.*/
            branches:
              only: master
      - deploy:
          name: deploy-to-staging-from-deploy-branch
          env: develop
          url: https://ap.risily.com/
          filters:
            tags:
              ignore: /.*/
            branches:
              only: /^deploy\/.*$/
      - deploy:
          name: deploy-to-production
          env: production
          url: https://ap.resily.com/
          requires:
            - build-docker-images-by-tag
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
